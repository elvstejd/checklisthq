import clsx from "clsx";
import Head from "next/head";
import type { Control, UseFormRegister } from "react-hook-form";
import { useForm, useFieldArray } from "react-hook-form";
import { SpanInput } from "../components/SpanInput";

const defaultValues = {
  title: "",
  sections: [
    {
      title: "",
      tasks: [
        {
          title: "",
          description: "",
        },
      ],
    },
  ],
};

export default function New() {
  const { register, control } = useForm({
    defaultValues,
  });
  const { fields: sections, append } = useFieldArray({
    control,
    name: "sections",
  });

  return (
    <>
      <Head>
        <title>Create new checklist</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div className="mx-auto max-w-2xl">
          <p className="my-10 text-center">repeatlist</p>
          <div className="relative mb-4 flex justify-center">
            <SpanInput
              className="bold text-center text-2xl font-bold"
              placeholder="How to do a task"
              uniqueClass="checklist-title"
            />
          </div>
          {sections.map((_, index) => (
            <div
              key={index}
              className="mb-6 rounded-md border border-solid border-gray-200"
            >
              <div className="border-b py-3 px-4">
                <SpanInput
                  placeholder="Section title"
                  className="text-lg font-semibold text-gray-800"
                  uniqueClass="section-title"
                />
              </div>
              <div className="px-4">
                <TasksInputArray
                  {...{ control, register }}
                  nestedIndex={index}
                />
              </div>
            </div>
          ))}
          <button
            onClick={() =>
              append({ tasks: [{ description: "", title: "" }], title: "" })
            }
          >
            Add section
          </button>
        </div>
      </main>
    </>
  );
}

function TasksInputArray({
  nestedIndex,
  control,
  register,
}: {
  nestedIndex: number;
  control: Control<typeof defaultValues>;
  register: UseFormRegister<typeof defaultValues>;
}) {
  const { fields: tasks, append } = useFieldArray({
    control,
    name: `sections.${nestedIndex}.tasks`,
  });

  return (
    <>
      {tasks.map((task, index) => (
        <div
          key={index}
          className={clsx(
            "group flex items-center gap-4 border-t-gray-200 py-3",
            index !== 0 ? "border-t" : "border-t-0"
          )}
        >
          <div
            className={
              "flex aspect-square h-10 items-center justify-center rounded-full border-2 bg-gray-100 transition-colors"
            }
          />
          <div className="w-full">
            <SpanInput
              placeholder="Step title"
              className="block font-medium text-slate-900"
              uniqueClass="step-title"
            />
            <textarea
              placeholder="Step description"
              {...register(
                `sections.${nestedIndex}.tasks.${index}.description`
              )}
              className="mt-2 block w-full rounded-md bg-white px-2 py-1 text-sm text-gray-500 transition-colors placeholder-shown:bg-gray-100 hover:bg-gray-100 focus-visible:bg-white"
            />
          </div>
        </div>
      ))}
      <button onClick={() => append({ description: "", title: "" })}>
        Add step
      </button>
    </>
  );
}
