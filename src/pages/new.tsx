import clsx from "clsx";
import Head from "next/head";
import { useState } from "react";
import type { Control, UseFormRegister } from "react-hook-form";
import { useForm, useFieldArray } from "react-hook-form";
import { SpanInput } from "../components/SpanInput";
import { Article, X } from "phosphor-react";
import Button from "../components/Button";

const defaultValues = {
  title: "",
  sections: [
    {
      title: "",
      tasks: [
        {
          title: "",
          description: "",
        },
      ],
    },
  ],
};

export default function New() {
  const { register, control } = useForm({
    defaultValues,
  });
  const { fields: sections, append } = useFieldArray({
    control,
    name: "sections",
  });

  return (
    <>
      <Head>
        <title>Create new checklist</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div className="mx-auto max-w-2xl">
          <p className="my-10 text-center">repeatlist</p>
          <div className="relative mb-4 flex justify-center">
            <SpanInput
              className="bold text-center text-2xl font-bold"
              placeholder="How to do a task"
              uniqueClass="checklist-title"
            />
          </div>
          {sections.map((_, sectionIndex) => (
            <div
              key={sectionIndex}
              className="mb-6 rounded-md border border-solid border-gray-200"
            >
              <div className="border-b py-3 px-4">
                <SpanInput
                  placeholder="Section title"
                  className="text-lg font-semibold text-gray-800"
                  uniqueClass="section-title"
                />
              </div>
              <div className="px-4">
                <TasksInputArray
                  {...{ control, register }}
                  sectionIndex={sectionIndex}
                />
              </div>
            </div>
          ))}
          <button
            onClick={() =>
              append({ tasks: [{ description: "", title: "" }], title: "" })
            }
          >
            Add another section...
          </button>
        </div>
      </main>
    </>
  );
}

function TasksInputArray({
  sectionIndex,
  control,
  register,
}: {
  sectionIndex: number;
  control: Control<typeof defaultValues>;
  register: UseFormRegister<typeof defaultValues>;
}) {
  const { fields: tasks, append } = useFieldArray({
    control,
    name: `sections.${sectionIndex}.tasks`,
  });

  return (
    <>
      {tasks.map((_, taskIndex) => (
        <TaskInput
          key={taskIndex}
          sectionIndex={sectionIndex}
          taskIndex={taskIndex}
          register={register}
        />
      ))}
      <button onClick={() => append({ description: "", title: "" })}>
        Add step
      </button>
    </>
  );
}

function TaskInput({
  sectionIndex,
  taskIndex,
  register,
}: {
  sectionIndex: number;
  taskIndex: number;
  register: UseFormRegister<typeof defaultValues>;
}) {
  const [showDesc, setShowDesc] = useState(false);

  return (
    <div
      key={taskIndex}
      className={clsx(
        "group flex items-baseline gap-4 border-t-gray-200 py-3",
        taskIndex !== 0 ? "border-t" : "border-t-0"
      )}
    >
      <div className="w-full">
        <SpanInput
          placeholder="Describe the step"
          className="block font-medium text-slate-900"
          uniqueClass="step-title"
        />
        {showDesc && (
          <textarea
            placeholder="Add more information..."
            {...register(
              `sections.${sectionIndex}.tasks.${taskIndex}.description`
            )}
            className="transition-color block w-full rounded-md border border-transparent bg-white px-2 py-1 text-sm text-gray-500 hover:border-gray-400"
          />
        )}
      </div>
      <div className="flex opacity-0 transition-opacity group-focus-within:opacity-100 group-hover:opacity-100">
        <Button
          square
          noBorder
          variant="outline"
          onClick={() => setShowDesc((v) => !v)}
        >
          <Article />
        </Button>
        <Button square variant="outline" noBorder>
          <X />
        </Button>
      </div>
    </div>
  );
}
