import clsx from "clsx";
import Head from "next/head";
import { useState } from "react";
import type {
  Control,
  UseFieldArrayRemove,
  UseFormRegister,
  UseFormWatch,
} from "react-hook-form";
import { useForm, useFieldArray } from "react-hook-form";
import { SpanInput } from "../components/SpanInput";
import { Article, X } from "phosphor-react";
import Button from "../components/Button";
import { useSettingsStore } from "../stores";
import { SettingsMenu } from "../components/SettingsMenu";

const defaultValues = {
  title: "",
  sections: [
    {
      title: "",
      tasks: [
        {
          title: "",
          description: "",
        },
      ],
    },
  ],
};

export default function New() {
  const { register, control, watch } = useForm({
    defaultValues,
  });
  const {
    fields: sections,
    append,
    remove,
  } = useFieldArray({
    control,
    name: "sections",
  });

  const { showSectionTitles, showMultipleSections } = useSettingsStore();

  return (
    <>
      <Head>
        <title>Create new checklist</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div className="mx-auto max-w-2xl">
          <div className="flex items-center justify-between">
            <p className="my-10 text-center">repeatlist</p>
            <SettingsMenu />
          </div>
          <div className="relative mb-4 flex justify-center">
            <SpanInput
              className="bold text-center text-2xl font-bold"
              placeholder="Your Awesome Title Here"
              uniqueClass="checklist-title"
            />
          </div>
          {sections.map((section, sectionIndex) => (
            <div
              key={section.id}
              className="mb-6 rounded-md border border-solid border-gray-200"
            >
              {showSectionTitles && (
                <div className="border-b py-3 px-4">
                  <SpanInput
                    placeholder="Section title"
                    className="text-lg font-semibold text-gray-800"
                    uniqueClass="section-title"
                  />
                </div>
              )}
              <div className="px-4">
                <TasksInputArray
                  {...{ control, register }}
                  sectionIndex={sectionIndex}
                  sectionRemove={remove}
                  watch={watch}
                />
              </div>
            </div>
          ))}
          {showMultipleSections && (
            <button
              onClick={() =>
                append({ tasks: [{ description: "", title: "" }], title: "" })
              }
            >
              Add another section...
            </button>
          )}
        </div>
      </main>
    </>
  );
}

function TasksInputArray({
  sectionIndex,
  control,
  register,
  sectionRemove,
  watch,
}: {
  sectionIndex: number;
  control: Control<typeof defaultValues>;
  register: UseFormRegister<typeof defaultValues>;
  sectionRemove: UseFieldArrayRemove;
  watch: UseFormWatch<typeof defaultValues>;
}) {
  const {
    fields: tasks,
    append,
    remove,
  } = useFieldArray({
    control,
    name: `sections.${sectionIndex}.tasks`,
  });

  return (
    <>
      {tasks.map((task, taskIndex) => (
        <TaskInput
          key={task.id}
          sectionIndex={sectionIndex}
          taskIndex={taskIndex}
          register={register}
          remove={remove}
          sectionRemove={sectionRemove}
          watch={watch}
        />
      ))}
      <div className="border-t border-t-gray-200 py-3">
        <button
          className="empty:before:text-gray-40 w-fit rounded-md border border-transparent px-2 py-1 text-gray-400"
          onClick={() => append({ description: "", title: "" })}
        >
          Add step...
        </button>
      </div>
    </>
  );
}

function TaskInput({
  sectionIndex,
  taskIndex,
  register,
  remove,
  sectionRemove,
  watch,
}: {
  sectionIndex: number;
  taskIndex: number;
  register: UseFormRegister<typeof defaultValues>;
  remove: UseFieldArrayRemove;
  sectionRemove: UseFieldArrayRemove;
  watch: UseFormWatch<typeof defaultValues>;
}) {
  const [showDesc, setShowDesc] = useState(false);
  const watchSections = watch("sections");

  return (
    <div
      className={clsx(
        "group flex items-baseline gap-4 border-t-gray-200 py-3",
        taskIndex !== 0 ? "border-t" : "border-t-0"
      )}
    >
      <div className="w-full">
        <SpanInput
          placeholder="Describe the step"
          className="block font-medium text-slate-900"
          uniqueClass="step-title"
        />
        {showDesc && (
          <textarea
            placeholder="Add more information..."
            {...register(
              `sections.${sectionIndex}.tasks.${taskIndex}.description`
            )}
            className="transition-color block w-full rounded-md border border-transparent bg-white px-2 py-1 text-sm text-gray-500 hover:border-gray-400"
          />
        )}
      </div>
      <div className="flex opacity-0 transition-opacity group-focus-within:opacity-100 group-hover:opacity-100">
        <Button
          square
          noBorder
          variant="outline"
          onClick={() => setShowDesc((v) => !v)}
        >
          <Article />
        </Button>
        <Button
          square
          variant="outline"
          noBorder
          onClick={() => {
            remove(taskIndex);

            const lastTaskOnTheSection =
              watchSections[sectionIndex]?.tasks.length === 0;

            if (sectionIndex > 0 && lastTaskOnTheSection) {
              sectionRemove(sectionIndex);
            }
          }}
        >
          <X />
        </Button>
      </div>
    </div>
  );
}
